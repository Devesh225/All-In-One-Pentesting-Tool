import requests 
import sys 
from scapy.all import *
import socket
import pyfiglet
import hashlib
import paramiko
import os

# Directory Enumeration
def directoryEnumeration():
    target = str(input('Please enter domain name or target IP address: '))
    directoryLocation = input('Enter Directory Wordlist Location: ')
    with open(directoryLocation, 'r') as file:
        directories = file.read().split()
    i = 1
    for dir in directories:
        dir_enum = f"http://{target}/{dir}.html" 
        r = requests.get(dir_enum)
        if r.status_code==404: 
            pass
        else:
            print(f"Directory {i}: {dir_enum}")
            i = i + 1

    if i == 1:
        print('NO DIRECTORIES FOUND')
    print("DIRECTORY ENUMERATION COMPLETE")


# Subdomain Enumeration
def subdomainEnumeration():
    target = str(input('Please enter domain name or target IP address: '))
    subDomainLocation = input('Enter Subdomain Wordlist Location: ')
    with open(subDomainLocation, 'r') as file:
        subdomains = file.read().split()
    i = 1
    for sub in subdomains:
        sub_domains = f"http://{sub}.{target}" 

        try:
            requests.get(sub_domains)
        
        except requests.ConnectionError: 
            pass
        
        else:
            print(f"Domain {i}: {sub_domains}")
            i = i + 1

    if i == 1:
        print('NO SUBDOMAINS FOUND')
    print("SUBDOMAIN ENUMERATION COMPLETE")


# ARP Network Ping Scanner
def networkScanner():
    interface = input('Enter Inteface: ')
    ip_range = input('Enter IP Range (CIDR Notation -> X.X.X.X/X): ')
    broadcastMac = input('Enter Broadcase Mac: ')

    packet = Ether(dst=broadcastMac)/ARP(pdst = ip_range) 

    ans, unans = srp(packet, timeout =2, iface=interface, inter=0.1)

    for send,receive in ans:
            print (receive.sprintf(r"%Ether.src% - %ARP.psrc%"))


    print("ARP NETWORK SCAN COMPLETE")


# Port Scanner
def portScanner():
    ip = input('Enter IP Address: ')
    ports = range(1, 65535)

    def probe_port(ip, port, result = 1): 
      try: 
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM) 
        sock.settimeout(0.5) 
        r = sock.connect_ex((ip, port))   
        if r == 0: 
          result = r 
        sock.close() 
      except Exception as e: 
        pass 
      return result


    for port in ports: 
        sys.stdout.flush() 
        response = probe_port(ip, port) 
        if response == 0: 
            print(f'Open Port: {port}')


    print("PORT SCAN COMPLETE")

        
# Hash Cracker
def hashCracker():
    wordlist_location = str(input('Enter wordlist file location: '))
    hash_input = str(input('Enter hash to be cracked: '))

    with open(wordlist_location, 'r') as file:
        for line in file.readlines():
            hash_ob = hashlib.md5(line.strip().encode())
            hashed_pass = hash_ob.hexdigest()
            if hashed_pass == hash_input:
                print('Password Cracked! : ' + line.strip())
                return
        print("Could not crack the password, sorry :(")

    print("HASH CRACK COMPLETE")

# Brute Force SSH
def sshbruteForcer():
    target = str(input('Please enter target IP address: '))
    username = str(input('Please enter username to bruteforce: '))
    password_file = str(input('Please enter location of the password file: '))

    def ssh_connect(password, code=0):
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

        try:
            ssh.connect(target, port=22, username=username, password=password)
        except paramiko.AuthenticationException:
            code = 1
        ssh.close()
        return code

    with open(password_file, 'r') as file:
        for line in file.readlines():
            password = line.strip()
            
            try:
                response = ssh_connect(password)

                if response == 0:
                     print('password found: '+ password)
                     exit(0)
                elif response == 1: 
                    print('no luck')
            except Exception as e:
                print(e)
            pass

    input_file.close()
    print("BRUTE FORCE SSH COMPLETE")


def __main__():
    ascii_banner = pyfiglet.figlet_format("All in One Pentesting Tool \n~ d3v3sh225")
    print(ascii_banner)
    choice = 'y'
    while choice.lower() == 'y':
        print("\nOPTIONS :-\n1. Directory Enumeration\n2. Subdomain Enumeration\n3. ARP Network Ping Scanner\n4. Port Scanner\n5. Hash Cracker\n6. SSH Brute Force\n7. Exit\n")
        option = int(input('Enter Choice: '))
        match option:
            case 1:
                directoryEnumeration()
            case 2:
                subdomainEnumeration()
            case 3:
                networkScanner()
            case 4:
                portScanner()
            case 5:
                hashCracker()
            case 6:
                sshBruteForcer()
            case 7:
                print('Thank you for using this tool ~ d3v3sh225!')
                break
            case _:
                return "Invalid Option"

        choice = input('Do you want to continue: (y/n): ')
        if choice.lower() == 'n':
            print('Thank you for using this tool ~ d3v3sh225!')

__main__()
